- var title ='Actualización de persona'
include ..\includes\layout
block content
html(lang="es")
head
    link(rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="")
    script(src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="")
body
    h2.text-center Actualice los datos de la persona
    if messages.error
        .alert.alert-danger
            = messages.error
    div.modal#alertModal(tabindex="-1" role="dialog" aria-labelledby="alertModalLabel" aria-hidden="true")
        div.modal-dialog(role="document")
            div.modal-content
                div.modal-header
                    h5.modal-title#alertModalLabel Alerta
                    button.close(type="button" data-bs-dismiss="modal" aria-label="Close")
                        span(aria-hidden="true") ×
                div.modal-body
                    p#mensajeAlerta Mensaje de alerta
    form#form(action="/personas/"+persona.DNI+"?_method=PUT" method="post")
        .form-group
            label.form-label(for="dni") DNI:
            .input-group
                input.form-control(type="text" id="dni" name="DNI" value=persona.DNI disabled)
        .form-group
            label.form-label(for="nombre") Nombre:
            .input-group.has-validation
                input.form-control(type="text" id="nombre" name="nombre" placeholder="Ingrese un nombre de 3 a 50 caracteres" title="El nombre solo puede contener un máximo de cincuenta caracteres" value=persona.nombre required)
                .invalid-feedback.d-none(id="nombreVacio") El campo no puede estar vacío
                .invalid-feedback.d-none(id="nombreInvalido") El nombre no puede contener más de treinta caracteres
                .invalid-feedback.d-none(id="nombreNumeros") El nombre no puede contener números
        .form-group
            label.form-label(for="apellido") Apellido:
            .input-group.has-validation
                input.form-control(type="text" id="apellido" name="apellido" placeholder="Ingrese un nombre de 3 a 50 caracteres" title="El apellido solo puede contener un máximo de cincuenta caracteres" value=persona.apellido required)
                .invalid-feedback.d-none(id="apellidoVacio") El campo no puede estar vacío
                .invalid-feedback.d-none(id="apellidoInvalido") El apellido no puede contener más de treinta caracteres
                .invalid-feedback.d-none(id="apellidoNumeros") El apellido no puede contener números
        .form-group
            label.form-label(for="email") Email:
            .input-group.has-validation
                input.form-control(type="email" id="email" name="email" placeholder="Ingrese un email válido" title="El email debe ser válido" value=persona.email required)
                .invalid-feedback.d-none(id="emailVacio") El campo no puede estar vacío
                .invalid-feedback.d-none(id="emailInvalido") El email no es valido
        .form-group
            label.form-label(for="fechaDeNacimiento") Fecha de Nacimiento:
            .input-group.has-validation
                input.form-control(type="date" id="fechaDeNacimiento" name="fechaDeNacimiento" value=persona.fechaDeNacimiento required)
                .invalid-feedback.d-none(id="fechaDeNacimientoVacia") El campo no puede estar vacío
                .invalid-feedback.d-none(id="fechaDeNacimientoAntigua") La fecha ingresada debe ser posterior a 1923
                .invalid-feedback.d-none(id="fechaDeNacimientoSuperior") La fecha de nacimiento es superior a la actual
                .invalid-feedback.d-none(id="fechaDeNacimientoAgente") La fecha de nacimiento debe superior cuando se trata de un agente de salud
        .form-group
            label(for="ocupacion") Ocupación:
            if(persona.ocupacion=="agente de salud")
                select.form-select(name="ocupacion" id="ocupacion" required)
                    option(value="agente de salud" selected) Agente de Salud
                    option(value="otro") Otro
                .form-group.d-inline#matriculaDiv
                    label.form-label(for="matricula" id="matriculaLabel") Matrícula:
                    .input-group.has-validation
                        input.form-control(type="number" id="matricula" name="matricula" placeholder="Ingrese una matrícula de 8 digitos" title="La matrícula debe contener 8 digitos" value=persona.Agentedesalud.matricula)
                        .invalid-feedback.d-none(id="matriculaVacio") El campo no puede estar vacío
                        .invalid-feedback.d-none(id="matriculaInvalido") La matrícula no es valida
                        .invalid-feedback.d-none(id="matriculaExiste") La matrícula ya existe
            else 
                select.form-select(name="ocupacion" id="ocupacion" required)
                    option(value="agente de salud") Agente de Salud
                    option(value="otro" selected) Otro
                .form-group.d-none#matriculaDiv
                    label.form-label(for="matricula" id="matriculaLabel") Matrícula:
                    .input-group.has-validation
                        input.form-control(type="number" id="matricula" name="matricula" placeholder="Ingrese una matrícula de 8 digitos" title="La matrícula debe contener 8 digitos")
                        .invalid-feedback.d-none(id="matriculaVacio") El campo no puede estar vacío
                        .invalid-feedback.d-none(id="matriculaExiste") La matrícula ya existe
                        .invalid-feedback.d-none(id="matriculaInvalido") La matrícula no es valida
        .form-group
            label.form-label(for="genero") Género:
            .input-group.has-validation
            select.form-select(name="genero" id="genero" required)
                option(value="Masculino" selected=persona.genero === 'Masculino') Masculino
                option(value="Femenino" selected=persona.genero === 'Femenino') Femenino
                option(value="Otro" selected=persona.genero === 'Otro') Otro
        .form-group
            label.form-label(for="celular1") Celular 1:
            .input-group.has-validation
                input.form-control(type="tel" id="celular1" name="celular1" placeholder="Ingrese un celular de 10 digitos si posee" title="El celular debe contener 10 digitos" value=persona.Telefono.celular1)
                .invalid-feedback.d-none(id="celular1Invalido") El celular debe contener 10 digitos sin espacios ni guiones
                .invalid-feedback.d-none(id="celular1Letras") El celular no puede contener letras, espacios ni guiones
        .form-group
            label.form-label(for="celular2") Celular 2:
            .input-group.has-validation
                input.form-control(type="tel" id="celular2" name="celular2" placeholder="Ingrese un celular de 10 digitos si posee" title="El celular debe contener 10 digitos" value=persona.Telefono.celular2)
                .invalid-feedback.d-none(id="celular2Invalido") El celular debe contener 10 digitos sin espacios ni guiones
                .invalid-feedback.d-none(id="celular2Letras") El celular no puede contener letras, espacios ni guiones
        .form-group
            label.form-label(for="patologiaBase") Patologia Base:
            .input-group.has-validation
                select.form-select(name="patologiaBase" id="patologiaBase" required)
                    each patologia in patologiasBase || []
                        option(value=patologia selected=(persona.PatologiaBase.patologiaBase === patologia))= patologia
            
        .form-group
            label.form-label(for="direccion") Dirección:
            .input-group.has-validation
                input.form-control(type="text" id="direccion" name="direccion" placeholder="Ingrese la dirección" value=persona.direccion required)
                .invalid-feedback.d-none(id="direccionVacia") El campo no puede estar vacío
        
        .form-group
            label.form-label(for="provincia") Provincia:
            select.form-select(name="provincia" id="provincia" required)
                option(value="") Seleccione una provincia
                each provincia in provincias
                    option(value=provincia selected=(persona.provincia === provincia))= provincia
        .form-group
            label.form-label(for="localidad") Localidad:
            select.form-select(id="localidad" name="localidad" required)
                option(value="") Seleccione una localidad
                each localidad in localidades
                    option(value=localidad selected=(persona.localidad === localidad))= localidad
        
        br
        div.text-center
            button(type="submit" class="btn btn-primary") Actualizar
            | &nbsp;&nbsp;&nbsp;&nbsp;
            button(type="button" class="btn btn-primary" onclick="window.location.href='/personas'") Volver
script.
    document.addEventListener('DOMContentLoaded', function () {
        const provinciaSelect = document.getElementById('provincia');
        const localidadSelect = document.getElementById('localidad');

        provinciaSelect.addEventListener('change', async function () {
            const selectedProvincia = provinciaSelect.value;

            try {
                const response = await fetch(`https://apis.datos.gob.ar/georef/api/localidades?provincia=${selectedProvincia}`);
                const data = await response.json();

                // Limpiar opciones actuales
                localidadSelect.innerHTML = '';

                // Agregar opciones actualizadas
                data.localidades.forEach(localidad => {
                    const option = document.createElement('option');
                    option.value = localidad.nombre;
                    option.textContent = localidad.nombre;
                    localidadSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error al obtener localidades:', error);
            }
        });

        // Llamar la función de cambio para cargar las localidades iniciales
        $('#provincia').trigger('change');
    });


        function mostrarAlerta() {
            $('#mensajeAlerta').text("¡Datos incorrectos! Por favor, verifica la información ingresada.");
            $('#alertModal').modal('show');
        }

        // Funciones para mostrar y quitar errores
        function mostrarError(campo, error) {
            campo.addClass('is-invalid').removeClass('is-valid');
            $('#' + campo.attr('id') + error).removeClass('d-none');
        }

        function quitarError(campo) {
            campo.addClass('is-valid').removeClass('is-invalid');
            $('div[id^=' + campo.attr('id') + '].invalid-feedback').addClass('d-none');
        }

        function validarNombreYApellido(campo){
            quitarError(campo);
            if(!campo.val()){
                mostrarError(campo, 'Vacio');
            } else if(!/^[A-Za-záéíóúüñÁÉÍÓÚÜÑ\s]{1,}$/.test(campo.val())){
                mostrarError(campo, 'Numeros');
            } else if(campo.val().length < 3 || campo.val().length > 50){
                mostrarError(campo, 'Invalido');
            }
        }

        function validarEmail(){
            quitarError($('#email'));
            if (!$('#email').val()) {
                mostrarError($('#email'), 'Vacio');
            } else if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test($('#email').val())) {
                mostrarError($('#email'), 'Invalido');
            } 
        }

        function validarFecha() {
            // Limpiar errores previos
            quitarError($('#fechaDeNacimiento'))
            if (!$('#fechaDeNacimiento').val()) {
                mostrarError($('#fechaDeNacimiento'), 'Vacia');
            } else {
                let fechaIngresada = new Date($('#fechaDeNacimiento').val())
                let fechaActual = new Date()
                fechaIngresada.setHours(24, 0, 0, 0)
                fechaActual.setHours(0, 0, 0, 0)
                if (((fechaIngresada - fechaActual) / (1000 * 60 * 60 * 24)) > 0) {
                    mostrarError($('#fechaDeNacimiento'), 'Superior');
                } else {
                    fechaActual.setFullYear(fechaActual.getFullYear()-100);
                    if (fechaIngresada < fechaActual) {
                        mostrarError($('#fechaDeNacimiento'), `Antigua`);
                    } else if ($('#ocupacion option:selected').val() === 'agente de salud' && (((fechaIngresada - fechaActual)) > 2429996400000)) {
                        mostrarError($('#fechaDeNacimiento'), 'Agente');
                    }
                }
            }
        }

        function mostrarMatricula(){
            quitarError($('#matricula'));
            if($('#ocupacion option:selected').val() === 'agente de salud'){
                $('#matriculaDiv').removeClass('d-none');
                $('#matricula').val(!{JSON.stringify(persona)}.Agentedesalud.matricula);
            } else {
                $('#matriculaDiv').addClass('d-none');
                $('#matricula').val('');
            }
        }

        // Función para validar la matrícula
        function validarMatricula() {
            quitarError($('#matricula'));

            const matriculaIngresada = $('#matricula').val();

            if (!matriculaIngresada) {
                mostrarError($('#matricula'), 'Vacio');
            } else if (!/^[0-9]{8}$/.test(matriculaIngresada)) {
                mostrarError($('#matricula'), 'Invalido');
            } else {
                // Convertimos agentesdesalud y persona a variables JavaScript válidas
                const agentesdesalud = JSON.parse('{!!JSON.stringify(agentesdesalud)}');
                const agenteDeSaludActual = JSON.parse('{!!JSON.stringify(persona.AgenteDeSalud)}');

                if (!Array.isArray(agentesdesalud)) {
                    console.error('Error: agentesdesalud no es un array válido.');
                    return;
                }

                const matriculaExistente = agentesdesalud
                    .filter(agente => agente.matricula !== null) // Filtrar solo los agentes con matrícula válida
                    .filter(agente => agente.matricula !== agenteDeSaludActual.matricula) // Excluir la matrícula actual de la persona
                    .some(agente => agente.matricula === matriculaIngresada); // Verificar si la matrícula ingresada ya existe

                if (matriculaExistente) {
                    mostrarError($('#matricula'), 'Existe');
                }
            }
        }

        // Evento para ejecutar validarMatricula en eventos de teclado o focusout
        $('#matricula').on('keyup focusout', function () {
            validarMatricula();
    });

        function validarCelular(campo) {
            quitarError(campo)
            if (campo.val() !== '') {
                if(!/^[0-9]{1,}$/.test(campo.val())){
                    mostrarError(campo, 'Letras')
                } else if (campo.val().length != 10) {
                    mostrarError(campo, 'Invalido')
                } 
            }
        }

        function cargarPatologias() {
            const patologiaBase = !{JSON.stringify(persona)}.Patologiabase.patologiaBase;
            $('#patologiaBase').empty(); // Limpiar opciones actuales

            [
                "Ninguna",
                "Obesidad",
                "Diabetes",
                "Enfermedad respiratorio cronica",
                "Enfermedad cardiaca cronica",
                "Inmunodeficiencia congénita o adquirida",
                "Enfermedad oncohematologica",
                "Trasplante de organo solido o de medula osea",
                "Insuficiencia renal cronica",
                "Otro"
            ].forEach(patologia => {
                const option = $('<option>', { value: patologia, text: patologia });
                if (patologia === patologiaBase) {
                    option.attr('selected', true);
                }
                $('#patologiaBase').append(option);
            });
        }

        // Función para validar todos los campos antes de enviar el formulario  4x
        function validarFormulario() {
            let inputs = $('#form input:visible:not([d-none]), #form select:visible:not([d-none])');
            let camposInvalidos = false;
            inputs.each(function () {
                if ($(this).attr('id') !== 'longitud' && !$(this).hasClass('d-none') && $(this).attr('id') !== 'latitud') {
                    if ($(this).hasClass('is-invalid')) {
                        camposInvalidos = true;
                    }
                }
            });
            if (camposInvalidos) {
                mostrarAlerta("¡Datos incorrectos! Por favor, verifica la información ingresada.");
                return false;
            }
            return true;
        }

        // Eventos
        $(document).ready(function () {
            cargarPatologias();
        });

        quitarError($('#ocupacion'));
        quitarError($('#genero'));
        quitarError($('#patologiaBase'));
        quitarError($('#dni'));
        quitarError($('#nombre'));
        quitarError($('#apellido'));
        quitarError($('#email'));
        quitarError($('#fechaDeNacimiento'));
        quitarError($('#direccion'));
        quitarError($('#provincia'));
        quitarError($('#localidad'));
        quitarError($('#celular1'));
        quitarError($('#celular2'));

    
        let press = 0
        $('#alertModal').on('keyup', function (event) {
            // Si la tecla presionada es "Enter", oculta el modal
            if(event.key === 'Enter'){
                press++
            }
            if (event.key === 'Escape' || press == 2) {
                $('#alertModal').modal('hide');
                if(press == 2) press = 0
            }
        });

        // Evento cuando se oculta el modal
        $('#alertModal').on('hidden.bs.modal', function () {
            // Buscar el primer elemento con la clase 'is-invalid' y hacer foco en él
            var primerInvalido = $('.is-invalid:first');
            if (primerInvalido.length > 0) {
            primerInvalido.focus();
            }
        });


        $('#dni, #nombre, #apellido, #email, #fechaDeNacimiento, #matricula, #celular1, #celular2').trigger('focusout');
        $('#ocupacion, #genero, #patologiaBase').trigger('change');

        // Asociar el evento submit al formulario
        $('#form input').on('keypress submit', function () {
            if (event.which === 13) {
                console.log("Formulario enviado por teclado");
                if (!validarFormulario()) {
                    event.preventDefault(); // Evita que el formulario se envíe si la validación falla
                }
            }
        });
        $('#form').on('submit', function (event) {
            // Retorna el resultado de la función validarFormulario
            console.log("Formulario enviado por submit");
            if (!validarFormulario()) {
                event.preventDefault(); // Evita que el formulario se envíe si la validación falla
            }
        });
