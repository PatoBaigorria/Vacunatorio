- const title ='Alta de centro de vacunación'
include ..\includes\layout
block content
html(lang='es') 
head
    link(rel='stylesheet' href='https://unpkg.com/leaflet@1.9.4/dist/leaflet.css' integrity='sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=' crossorigin='')
    script(src='https://unpkg.com/leaflet@1.9.4/dist/leaflet.js' integrity='sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=' crossorigin='')
body
    h2.text-center Ingrese los datos del centro de vacunación
    if messages.success
        .alert.alert-success.flash-message.fade-in
            = messages.success
    if messages.error
        .alert.alert-danger.flash-message.fade-in
            = messages.error
    br
    form#form(action='/centrosdevacunacion' method='post')
        .form-group
            label.form-label(for='direccion') Dirección:
            .input-group.has-validation
                input.form-control.is-invalid#direccion(type='text' name='direccion')
                .invalid-feedback.d-none(id="direccionVacio") El campo no puede estar vacío
        .form-group
            label.form-label(for='provincia') Provincia:
            .input-group.has-validation
                select.form-select(name="provincia" id="provincia" required)
                    option(disabled selected hidden value="") Selecciona una provincia
                    each provincia in provincias
                        option(value=provincia)= provincia
                .invalid-feedback.d-none(id="provinciaSinSeleccionar") Seleccione una provincia

        .form-group
            label.form-label(for='localidad') Localidad:
            input-group.has-validation
                select.form-select(name="localidad" id="localidad" required)
                    option(disabled selected hidden value="") Selecciona una localidad
                    each localidad in localidades
                        option(value=localidad)= localidad
                .invalid-feedback.d-none(id="localidadSinSeleccionar") Seleccione una localidad
        br
        div.text-center
            button.btn.btn-primary(type='submit') Alta
            | &nbsp;&nbsp;&nbsp;&nbsp;
            button.btn.btn-primary(type='button' onclick='window.history.back()') Volver
script.
    document.addEventListener('DOMContentLoaded', function () {
        const provinciaSelect = document.getElementById('provincia');
        const localidadSelect = document.getElementById('localidad');

        provinciaSelect.addEventListener('change', async function () {
            const selectedProvincia = provinciaSelect.value;

            try {
                const response = await fetch(`https://apis.datos.gob.ar/georef/api/localidades?provincia=${selectedProvincia}`);
                const data = await response.json();

                // Limpiar opciones actuales
                localidadSelect.innerHTML = '';

                // Agregar opción por defecto
                const defaultOption = document.createElement('option');
                defaultOption.disabled = true;
                defaultOption.selected = true;
                defaultOption.hidden = true;
                defaultOption.value = "";
                defaultOption.textContent = "Selecciona una localidad";
                localidadSelect.appendChild(defaultOption);

                // Agregar opciones actualizadas
                const localidades = data.localidades.map(localidad => localidad.nombre);
                localidades.sort((a, b) => a.localeCompare(b)); // Ordenar alfabéticamente

                localidades.forEach(localidad => {
                    const option = document.createElement('option');
                    option.value = localidad; // Usar el nombre de la localidad
                    option.textContent = localidad; // Usar el nombre de la localidad
                    localidadSelect.appendChild(option);
                });

                // Limpiar la selección de localidad
                localidadSelect.value = ""; // Mantener "Selecciona una localidad"

                // Quitar el estado is-invalid de la provincia
                quitarError($(provinciaSelect));
                // Limpiar el estado de localidad
                quitarError($(localidadSelect));

            } catch (error) {
                console.error('Error al obtener localidades:', error);
            }
        });

        // Llamar la función de cambio para cargar las localidades iniciales
        $('#provincia').trigger('change');
    });

    // Función para mostrar errores
        function mostrarAlerta() {
            $('#mensajeAlerta').text("¡Datos incorrectos! Por favor, verifica la información ingresada.");
            $('#alertModal').modal('show');
        }

        // Funciones para mostrar y quitar errores
        function mostrarError(campo, error) {
            campo.addClass('is-invalid').removeClass('is-valid').addClass();
            $('#' + campo.attr('id') + error).removeClass('d-none');
        }

        function quitarError(campo) {
            campo.addClass('is-valid').removeClass('is-invalid');
            $('div[id^=' + campo.attr('id') + '].invalid-feedback').addClass('d-none');
        }

        function validarComboBox(campo){
            if(!campo.val()){
                mostrarError(campo, 'SinSeleccionar');
                $('#' + campo.attr('id') + 'SinSeleccionar').removeClass('d-none');
            } else {
                quitarError(campo);
            }
        }

        function validarDireccion() {
            quitarError($('#direccion'));
            const direccionValue = $('#direccion').val();
            if (!direccionValue) {
                mostrarError($('#direccion'), 'Vacio');
            } else if (direccionValue.length < 5 || direccionValue.length > 100) {
                mostrarError($('#direccion'), 'Invalido');
            }
        }
        $('#direccion').on('keyup focusout', function () {
            validarDireccion();
        });

        $('#provincia, #localidad').on('change', function () {
            validarComboBox($(this));
        });

        let press = 0
        $('#alertModal').on('keyup', function (event) {
            // Si la tecla presionada es "Enter", oculta el modal
            if(event.key === 'Enter'){
                press = press+1
            }
            if (event.key === 'Escape' || press == 2) {
                $('#alertModal').modal('hide');
                press = 0
            }
        });

        $('#alertModal').on('hidden.bs.modal', function () {
            // Buscar el primer elemento con la clase 'is-invalid' y hacer foco en él
            var primerInvalido = $('.is-invalid:first');
            if (primerInvalido.length > 0) {
                primerInvalido.focus();
            }
        });

        // Evento cuando se oculta el modal
        $('#alertModal').on('hidden.bs.modal', function () {
            // Buscar el primer elemento con la clase 'is-invalid' y hacer foco en él
            var primerInvalido = $('.is-invalid:first');
            if (primerInvalido.length > 0) {
                primerInvalido.focus();
            }
        });

        $('#direccion').trigger('focusout');
        $('#provincia, #localidad').trigger('change');

        // Asociar el evento submit al formulario
        $('#form input').on('keypress', function (event) {
            if (event.which === 13) {
                console.log("Formulario enviado por teclado");
                //console.log(validarFormulario());
                if(!validarFormulario()){
                    event.preventDefault();
                }
                // Puedes agregar lógica adicional aquí si es necesario
            }
        });

        $('#form button[type="submit"]').on('click', function (event) {
            console.log("Botón de envío clicado");
            if (!validarFormulario()) {
                event.preventDefault();
            }
        });



