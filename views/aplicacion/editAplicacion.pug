- const title = 'Actualizar aplicacion de vacunas'
include ..\includes\layout
block content
    html(lang="es")
    body
        h2.text-center Actualice los datos de la aplicación de la vacuna
        br
        form#form(action=`/aplicaciones/${aplicacion.idAplicacion}?_method=PUT` method='post' class='needs-validation' novalidate)
            .form-group
                label.form-label(for='idAplicacion') ID Aplicación:
                input.form-control.is-valid#idAplicacion(type='text' name='idAplicacion' value=aplicacion.idAplicacion readonly disabled)
            br
            .form-group
                label.form-label(for='DNIPaciente') Seleccione un Paciente:
                select.form-select.is-valid#DNIPaciente(name='DNIPaciente' required onchange=`agenteS(${JSON.stringify(agentes)}, ${JSON.stringify(personas)})`)
                    each paciente in pacientes
                        option(value=paciente.DNI selected=paciente.DNI === aplicacion.DNIPaciente) #{paciente.nombre} #{paciente.apellido}
                .valid-feedback
                .invalid-feedback
                    | Por favor, seleccione un paciente.
            br
            .form-group
                label.form-label(for='DNIAgente') Seleccione un Agente de Salud:
                select.form-select.is-valid#DNIAgente(name='DNIAgente' required)
                    each agente in agentes
                        if agente.DNI !== aplicacion.DNIPaciente
                            option(value=agente.DNI selected=agente.DNI === aplicacion.DNIAgente) #{agente.nombre} #{agente.apellido}
                .valid-feedback
                .invalid-feedback
                    | Por favor, seleccione un agente de salud.
            br
            .form-group
                label.form-label(for='numeroDeSerie') Seleccione el Lote de Vacunas que se Aplicará al Paciente:
                select.form-select.is-valid#numeroDeSerie(name='numeroDeSerie' required)
                    each lote in lotes
                        option(value=lote.numeroDeSerie selected=lote.numeroDeSerie === aplicacion.numeroDeSerie) #{lote.numeroDeSerie}
                .valid-feedback
                .invalid-feedback
                    | Por favor, seleccione un lote de vacunas.
            br
            .form-group
                label.form-label(for='fechaDeAplicacion') Fecha de Aplicación:
                    input.form-control.is-valid#fechaDeAplicacion(type='date' name='fechaDeAplicacion' value=aplicacion.fechaDeAplicacion required)
                    .invalid-feedback.d-none#fechaDeAplicacionVacio El campo no puede estar vacío
                    .invalid-feedback.d-none#fechaDeAplicacionSuperior La fecha de aplicación es superior a la actual
                    .invalid-feedback.d-none#fechaDeAplicacionLlegadaACentro La fecha de aplicación no puede ser anterior a la llegada al centro de vacunación
                    .d-none#fechaDeAplicacionVencida ADVERTENCIA: El lote seleccionado se encuentra vencido. Puede continuar, pero se recomienda precaución
            br
            div.text-center
                button.btn.btn-primary(type='submit') Actualizar
                | &nbsp;&nbsp;&nbsp;&nbsp;
                button.btn.btn-primary(type='button' onclick='window.history.back()') Volver
    script.
        let numeroDeSerieLote = !{JSON.stringify(aplicacion)}.numeroDeSerie
        document.addEventListener('DOMContentLoaded', function() {
            const fechaInput = document.getElementById('fechaDeAplicacion');

            fechaInput.addEventListener('change', function() {
                validarFechaDeAplicacion();
            });

            async function validarFechaDeAplicacion() {
                try{
                    quitarError($(fechaDeAplicacion))
                    if($(fechaDeAplicacionVencida).is(':visible')) {
                        $(fechaDeAplicacionVencida).addClass('d-none')  
                    }
                    if (!$(fechaDeAplicacion).val()) {
                        mostrarError($(fechaDeAplicacion), 'Vacio')
                    } else {
                        const fechaIngresada = new Date($(fechaDeAplicacion).val())
                        const fechaActual = new Date()
                        fechaIngresada.setHours(24, 0, 0, 0)
                        fechaActual.setHours(0, 0, 0, 0)
                        console.log('Fecha actual: ' + fechaActual)
                        console.log('Fecha ingresada: ' + fechaIngresada)
                        let loteInterno; 
                        await $.ajax({
                            url: '/lotesinternos/lotesinternosJSON',
                            type: 'GET',
                            contentType: 'application/json',
                            success: function(response){
                                loteInterno = response.find(lote => lote.numeroDeSerie == numeroDeSerieLote)
                            },
                            error: function(response){

                            }
                        })

                        const fechaVencimiento = new Date(loteInterno.Loteproveedor.fechaDeVencimiento)
                        if(loteInterno.fechaDeLlegadaCentroDeVacunacion != null){
                            const fechaDeLlegadaACentro = new Date(loteInterno.fechaDeLlegadaCentroDeVacunacion)
                            if(fechaIngresada < fechaDeLlegadaACentro){
                                mostrarError($(fechaDeAplicacion), 'LlegadaACentro')
                            } else if (fechaIngresada > fechaActual) {
                                mostrarError($(fechaDeAplicacion), 'Superior')
                            } else if (fechaIngresada > fechaVencimiento) {
                                mostrarError($(fechaDeAplicacion), 'Vencida')
                                $(fechaDeAplicacion).addClass('is-valid').removeClass('is-invalid')
                            }
                        } else {
                            mostrarError($(fechaDeAplicacion), 'LlegadaACentro')
                        }
                    }
                } catch(error){
                    console.log(error)
                }
            }
        });

        function mostrarError(campo, error) {
            campo.addClass('is-invalid').removeClass('is-valid')
            $(`#${campo.attr('id')}${error}`).removeClass('d-none')
        }

        function quitarError(campo) {
            campo.addClass('is-valid').removeClass('is-invalid')
            $(`div[id^=${campo.attr('id')}].invalid-feedback`).addClass('d-none')
        }

        function agenteS(agentes, pacientes) {
            console.log(agentes);
            console.log(pacientes);
            const pacienteSelect = document.getElementById("DNIPaciente").value;
            const agenteSelect = document.getElementById("DNIAgente");
            agenteSelect.innerHTML = "";  // Limpiar el contenido actual

            // Filtrar los agentes cuyo DNI no coincida con el DNI del paciente seleccionado
            agentes.forEach(agente => {
                if (agente.DNI !== pacienteSelect) { // Usa directamente `agente.DNI`
                    agenteSelect.innerHTML += `<option value="${agente.DNI}">${agente.nombre} ${agente.apellido}</option>`;
                }
            });
        }

        (function() {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(function(form) {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
