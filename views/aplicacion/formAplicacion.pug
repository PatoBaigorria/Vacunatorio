- const title ='Crear la aplicación de una vacuna'
include ..\includes\layout
block content
html(lang="es")
body
    h2.text-center Ingresar los datos de la aplicación de la vacuna
    if messages.error
        .alert.alert-danger
            = messages.error
    br
    div.modal#alertModal(tabindex="-1" role="dialog" aria-labelledby="alertModalLabel" aria-hidden="true")
        div.modal-dialog(role="document")
            div.modal-content
                div.modal-header
                    h5.modal-title#alertModalLabel Alerta
                    button.close(type="button" data-bs-dismiss="modal" aria-label="Close")
                        span(aria-hidden="true") ×
                div.modal-body
                    p#mensajeAlerta.text-center
    form#form(action="/aplicaciones" method="post")
        .form-group
            label.form-label(for="DNIPaciente") Paciente que recibio la aplicación de la vacuna:
            .input-group.has-validation
                select.form-select.is-valid#DNIPaciente(name="DNIPaciente" required)
                .invalid-feedback.d-none#DNIPacienteSinPacientes No hay pacientes cargadas en la BD, dé de alta alguno antes de generar una aplicación
        .form-group
            label.form-label(for="DNIAgente") Agente de Salud que aplico la vacuna:
            .input-group.has-validation
                select.form-select.is-valid#DNIAgente(name="DNIAgente" required)
                .invalid-feedback.d-none#DNIAgenteSinSeleccionar Seleccione un paciente primero
                .invalid-feedback.d-none#DNIAgenteSinAgentes No hay agentes cargados en la BD, dé de alta alguno antes de generar una aplicación
        .form-group    
            label.form-label(for="numeroDeSerie") Lote de vacunas que se aplico al Paciente:
            .input-group.has-validation
                select.form-select.is-valid#numeroDeSerie(name="numeroDeSerie" required)
                .invalid-feedback.d-none#numeroDeSerieSinSeleccionar Seleccione un lote interno de vacunas
                .invalid-feedback.d-none#numeroDeSerieNoLlegadaACentro El centro de vacunación aún no tiene vacunas para aplicar
        //.form-group
            label.form-label(for="fechaDeAplicacion") Fecha en la que se aplico la vacuna:
            .input-group.has-validation
                input.form-control.is-invalid#fechaDeAplicacion(type="date" name="fechaDeAplicacion" required)
                .invalid-feedback#fechaDeAplicacionVacio El campo no puede estar vacío
                .invalid-feedback.d-none#fechaDeAplicacionSuperior La fecha de aplicación es superior a la actual
                .invalid-feedback.d-none#fechaDeAplicacionLlegadaACentro La fecha de aplicación no puede ser anterior a la llegada al centro de vacunación
        br
        div.text-center
            button.btn.btn-primary(type="submit") Crear
            | &nbsp;&nbsp;&nbsp;&nbsp;
            button.btn.btn-primary(type="button" onclick="window.history.back()") Volver
script.
    $(function(){
        function mostrarAlerta(mensaje) {
            $(mensajeAlerta).text(mensaje)
            $(alertModal).modal('show')
        }

        function mostrarError(campo, error) {
            campo.addClass('is-invalid').removeClass('is-valid')
            $(`#${campo.attr('id')}${error}`).removeClass('d-none')
        }

        function quitarError(campo) {
            campo.addClass('is-valid').removeClass('is-invalid')
            $(`div[id^=${campo.attr('id')}].invalid-feedback`).addClass('d-none')
        }

        function cargarPacientes(){
            const pacientes = !{JSON.stringify(personas)}.filter(paciente => paciente.activo == 1)
            if(pacientes.length == 0){
                $(DNIPaciente).append(`<option disabled selected hidden value="">No hay pacientes dados de alta</option>`).prop('disabled', true)
                $(DNIAgente).append(`<option disabled selected hidden value="">No hay agentes dados de alta</option>`).prop('disabled', true)
                mostrarError($(DNIPaciente), 'SinPacientes')
                mostrarError($(DNIAgente), 'SinAgentes')
            } else {
                pacientes.forEach(paciente => {
                    $(DNIPaciente).append(`<option value="${paciente.DNI}">${paciente.nombre} ${paciente.apellido}</option>`)
                })
            }
        }

        function cargarAgentes() {
            let agentes = !{JSON.stringify(personas)}.filter(agente => agente.activo == 1 && agente.ocupacion == 'agente de salud' && agente.DNI != $(DNIPaciente).val())
            if(agentes.length == 0) {
                $(DNIAgente).empty().append(`<option disabled selected hidden value="">No hay agentes dados de alta</option>`).prop('disabled', true)
                mostrarError($(DNIAgente), 'SinAgentes')
            } else {
                quitarError($(DNIAgente))
                $(DNIAgente).empty().prop('disabled', false)
                agentes.filter(agente => {
                    if(agente.DNI != $(DNIPaciente)){
                        $(DNIAgente).append(`<option value=${agente.DNI}>${agente.nombre} ${agente.apellido}</option>`)
                    }
                })
            }
        }

        function cargarLotes(){
            const lotes = !{JSON.stringify(lotes)}.filter(lote => lote.fechaDeLlegadaCentroDeVacunacion != null)
            if(lotes.length == 0){
                $(numeroDeSerie).append('<option selected hidden value="">Sin vacunas</option>')
                mostrarError($(numeroDeSerie), 'NoLlegadaACentro')
            } else {
                quitarError($(numeroDeSerie))
                $(numeroDeSerie).prop('disabled', false)
                $(fechaDeAplicacion).prop('disabled', false)
                lotes.forEach(lote => {
                    $(numeroDeSerie).append(`<option value=${lote.numeroDeSerie}> ${lote.numeroDeSerie} </option>`)
                })
            }
        }

        function validarFormulario() {
            const inputs = $('#form input, #form select')
            let camposInvalidos = false
            inputs.each(function () {
                if ($(this).hasClass('is-invalid')) {
                    camposInvalidos = true
                }
            })
            if (camposInvalidos) {
                mostrarAlerta("¡Datos incorrectos! Por favor, verifica la información ingresada.")
                return false
            }
            return true
        }

        cargarPacientes()
        cargarAgentes()
        $(DNIPaciente).on('change', function(){
            cargarAgentes()
        })

        /*$(fechaDeAplicacion).on('keyup focusout', function(){
            validarFechaDeAplicacion()
        })*/

        let press = 0
        $(alertModal).on('keyup', function (event) {

            if(event.key === 'Enter'){
                press = press+1
            }
            if (event.key === 'Escape' || press == 2) {
                $(alertModal).modal('hide')
                press = 0
            }
        })

        $(alertModal).on('hidden.bs.modal', function () {
            const primerInvalido = $('.is-invalid:first')
            if (primerInvalido.length > 0) {
                primerInvalido.focus()
            }
        })

        $(alertModal).on('hidden.bs.modal', function () {

            const primerInvalido = $('.is-invalid:first')
            if (primerInvalido.length > 0) {
                primerInvalido.focus()
            }
        })

        $(DNIPaciente).trigger('focus')

        $('#form input').on('keypress', function (event) {
            if (event.which === 13) {
                if(!validarFormulario()){
                    event.preventDefault()
                }
            }
        })

        $('#form button[type="submit"]').on('click', function (event) {
            if (!validarFormulario()) {
                event.preventDefault()
            }
        })
    })

    /*function validarCampos(){
        cargarAgentes()
        cargarLotes()
        if($(DNIPaciente).val() && $(DNIAgente).hasClass('is-invalid')){
            $(DNIAgente).prop('disabled', false)
            quitarError($(DNIAgente))
            quitarError($(DNIPaciente))
        }
        }

        function cargarAgentes(){
            $(DNIAgente).empty()
            if(!$(DNIPaciente).val()){
                $(DNIAgente).append('<option disabled selected hidden value="">Seleccione un agente de salud</option>')
            } else {
                !{JSON.stringify(personas)}.filter(persona => persona.ocupacion == 'agente de salud').forEach(agente => {
                    if($(DNIPaciente).val() != agente.DNI){
                        $(DNIAgente).append('<option value="' + agente.DNI + '">' + agente.nombre + ' ' + agente.apellido + '</option>')
                    }
                })
            }
        }



        function validarFechaDeAplicacion() {
            quitarError($(fechaDeAplicacion))
            if (!$(fechaDeAplicacion).val()) {
                mostrarError($(fechaDeAplicacion), 'Vacio')
            } else {
                const fechaIngresada = new Date($(fechaDeAplicacion).val())
                const fechaActual = new Date()
                fechaIngresada.setHours(24, 0, 0, 0)
                fechaActual.setHours(0, 0, 0, 0)

                const loteInterno = !{JSON.stringify(lotes)}.find(lote => lote.numeroDeSerie == $(numeroDeSerie).val())
                const fechaVencimiento = new Date(loteInterno.Loteproveedor.fechaDeVencimiento)
                if(loteInterno.fechaDeLlegadaCentroDeVacunacion != null){
                    const fechaDeLlegadaACentro = new Date(loteInterno.fechaDeLlegadaCentroDeVacunacion)
                    if(fechaIngresada < fechaDeLlegadaACentro){
                        mostrarError($(fechaDeAplicacion), 'LlegadaACentro')
                    } else if (fechaIngresada > fechaActual) {
                        mostrarError($(fechaDeAplicacion), 'Superior')
                    } else if (fechaIngresada > fechaVencimiento) {
                        mostrarAlerta('ADVERTENCIA: El lote seleccionado se encuentra vencido. Puede continuar, pero se recomienda precaución')
                    }
                } else {
                    mostrarError($(fechaDeAplicacion), 'LlegadaACentro')
                }
            }
        }

        function mostrarAdvertencia() {
            $(mensajeAlerta).text('ADVERTENCIA: El lote seleccionado se encuentra vencido. Puede continuar, pero se recomienda precaución.')
            $(alertModal).modal('show')
        }*/